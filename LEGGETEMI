======================================
ONSCRIPTER-INSANI LEGGETEMI (20230308)
======================================

-1. SULLA TRADUZIONE

Questa traduzione non è stata effettuata da una persona di lingua natale
italiana ma da un amatore francofono.  Tuttavia, è stata corretta da <zero>
persone italofone con maggiore esperienza. Questa traduzione si rivolge a più
persone e usa il pronome personale «voi».  Vedere la sezione RAGGIUNGERCI per
l'indirizzo della persona responsabile del progetto in caso di errore.


0. INTRODUZIONE E STORIA

ONScripter-insani è una diramazione di ONScripter, che è un progetto attivo
ancora nel 2022 (https://onscripter.osdn.jp/onscripter.html).  ONScripter è
un'implementazione libera di NScripter, un motore per la creazione di romanzi
videoludici che probabilmente ha contribuito a dare il via al fenomeno dei
romanzi videoludici in Giappone.  Molte aziende hanno utilizzato NScripter per
creare alcuni dei classici del genere, notevoli esempi sono «Mizuiro» di
Nekonekosoft e «Tsukihime» di TYPE-MOON.

Nel 2005, un programmatore chiamato chendo contribuì con alcune modifiche a
ONScripter che, per la prima volta, permettevano di utilizzare direttamente i
caratteri a un byte in ONScripter.  Noi membri della insani.org ci siamo
occupati della manutenzione di una diramazione separata di ONScripter per la
localizzazione di nuovi giochi.  Questa diramazione è stata poi trasformata in
una vera e propria versione derivata chiamata ONScripter-EN (ons-en), mantenuta
da Haeleth e Uncle Mion.  Gli ultimi commit di questa versione sono risalgono
al 2011 e da allora il progetto non è più stato mantenuto attivamente.

Alla data del febbraio 2023, i binari per ONScripter-EN avevano le seguenti
caratteristiche:

- Non funzionano più nei macOS moderni, probabilmente a causa di modifiche in
  materia di sicurezza apportate da Catalina e versioni successive
- Molti file audio non vengono riprodotti

Inoltre, gli alberi dei sorgenti di ONScripter-EN e ONScripter sono ora molto
diversi -- il che è normale dato che c'è un divario di 12 anni tra i due
progetti.  In questi 12 anni, ONScripter ha apportato molti dei miglioramenti
che erano presenti in ONScripter-EN, e ha subito almeno una riorganizzazione
completa dei file e dei nomi dei file.  Ciò significa che il confronto diretto
tra il codice di ONScripter-EN e quello di ONScripter è ora molto difficile.

Detto questo, a partire dall'aprile 2023, il progetto ONScripter-EN è di nuovo
ufficialmente mantenuto e siamo coinvolti nel fornire un sistema di
compilazione su Windows (x86-64 e i686).  Il progetto è disponibile qui:

- https://github.com/Galladite27/ONScripter-en
- https://github.com/insani-org/onscripter-en-msys2-configure-makefile

Questa iterazione di ONScripter-EN si concentra principalmente su funzionalità
avanzate non presenti attualmente in ONScripter e sul supporto Win32
(ONScripter-EN mira alle macchine virtuali Windows XP a 32 bit, per esempio).
Abbiamo scelto di riattivare la nostra diramazione ONScripter-insani, poiché
gli obiettivi di ONScripter-EN e ONScripter-insani sono leggermente diversi.
Consideriamo ONScripter-EN come un progetto gemello di ONScripter-insani e
lavoriamo a stretto contatto con i manutentori di tale progetto (per esempio,
manteniamo i Makefile di Windows per la compilazione tramite MSYS2).  I nostri
obiettivi per ONScripter-insani sono i seguenti:

- Rimanere il più vicino possibile all'ONScripter ascendente
- Includere una funzionalità che permetta davvero la modalità inglese
  preesistente (un byte, spaziatura fissa, usando `) per funzionare
- Fornire binari per le architetture moderne, in particolare per Apple Silicon
  macOS
- Concentrarsi sulla portabilità e sulla compilazione portatile, piuttosto che
  sulla replica delle funzionalità di ONScripter-EN
- Supportare la ludoteca dell'insani per posterità

Tutte le modifiche apportate da ONScripter-insani sono racchiuse in blocchi
#if defined(INSANI) ... #endif, per i seguenti motivi:

- Se compilate senza il parametro INSANI, otterrete la versione di base di
  ONScripter
- Poiché si tratta di una diramazione, questo ci permette di adattarci
  rapidamente a qualsiasi cambiamento che Ogapee potrebbe apportare in futuro.

Se volete contribuire al codice di ONScripter-insani, vi chiediamo di seguire
questa convenzione.
  
1. BIBLIOTECHE/UTILITÀ RICHIESTE E RACCOMANDATE

- Per macOS, il sistema di compilazione utilizza homebrew
- Per Windows, il sistema di compilazione utilizza MSYS2

Biblioteche richieste
------------------
- libjpeg
- bzip2
- SDL-2.0 E SDL1.2-compat
  OPPURE
  SDL-1.2
- SDL_image
- SDL_mixer
- SDL_ttf

Biblioteche raccomandate
---------------------
- SMPEG
- libogg
- libvorbis
- libmad

Utilità richieste (macOS)
--------------------------
- dylibbundler
- GNU make

1.1 GNU/LINUX

Ogni distribuzione GNU/Linux ha il proprio gestore di pacchetti.  Assicuratevi
semplicemente di ottenere le biblioteche necessarie usando quel gestore di
pacchetti.  Se si utilizza una distribuzione GNU/Linux più o meno moderna,
assicuratevi di utilizzare SDL2 + SDL1.2-compat, invece di utilizzare SDL1.2
puro.  Altrimenti otterrete delle rotture.

1.2 MACOS HOMEBREW

Dopo aver installato Homebrew (https://brew.sh), è sufficiente fare:

brew install jpeg jpeg-turbo bzip2 sdl2 sdl12-compat sdl_image sdl_mixer sdl_ttf smpeg libogg libvorbis make dylibbundler

È necessario assicurarsi che la cartella delle biblioteche di Homebrew
(/opt/homebrew/lib per impostazione predefinita) sia aggiunta alla variabile
PATH.  Dovrebbe essere aggiunta per impostazione predefinita dopo
l'installazione di Homebrew.

Tutti i binari creati con questa metodologia sono specifici sia per
l'architettura (ARM64/x86-64) che per la versione di macOS in cui vengono
compilati. Si consiglia di mantenere delle macchine virtuali semplicemente per
poter compilare su determinate piattaforme:

- ARM64: Ventura
- x86-64: Catalina

Raccomandiamo queste due rispettive versioni di macOS perché sono versioni
importanti che hanno apportato modifiche significative in materia di sicurezza
-- i binari delle versioni precedenti di macOS spesso non funzionano in queste
versioni, mentre i binari che funzionano in queste versioni funzioneranno in
tutte le versioni successive fino a oggi.

1.3 WINDOWS MSYS2

Procedete all'installazione di MSYS2 (https://www.msys2.org) e accettate il
percorso di installazione predefinito (C:\msys64).  Dopo aver installato
MSYS2, assicurarsi di essere accedere all'ambiente MINGW64.  Per impostazione
predefinita, MSYS2 viene lanciato nell'ambiente UCRT64, quindi fate attenzione.
Una volta entrati, aggiornate MSYS2:

pacman -Syuu

Questo probabilmente causerà la chiusura di MSYS2.  Rilanciare l'ambiente
MINGW64 ed eseguire di nuovo il comando finché non succede più nulla.
Quindi eseguire:

pacman -S mingw-w64-x86_64-SDL mingw-w64-x86_64-SDL_ttf mingw-w64-x86_64-SDL_mixer mingw-w64-x86_64-SDL_image mingw-w64-x86_64-bzip2 mingw-w64-x86_64-libogg mingw-w64-x86_64-libvorbis mingw-w64-x86_64-freetype mingw-w64-x86_64-smpeg mingw-w64-x86_64-iconv mingw-w64-x86_64-zlib mingw-w64-x86_64-toolchain 

2. ISTRUZIONI DI COMPILAZIONE

GNU/Linux
-----
make -f Makefile.Linux.insani

Su Linux e gcc, è possibile creare abbastanza facilmente una compilazione
statica del proprio binario passando l'opzione -static a gcc nel posto giusto
del Makefile.

macOS
-----
gmake -f Makefile.MacOSX.insani

Se volete creare un app bundle specifico per un gioco, potete farlo eseguendo
./makedist.MacOSX.sh; tuttavia, se volete diffondere effettivamente le vostre
compilazioni, avrete bisogno di un conto sviluppatore Apple e dovrete sborsare
99 dollari all'anno.  Istruzioni e note molto più dettagliate si trovano nella
sezione commenti di Makefile.MacOSX.insani.

Windows
-------
Nell'ambiente MINGW64 di MSYS2:

make -f Makefile.Win.insani

Le dipendenze DLL per il programma onscripter.exe risultante sono:

- libbrotlicommon.dll
- libbrotlidec.dll
- libbz2-1.dll
- libdeflate.dll
- libfreetype-6.dll
- libgcc_s_seh1.dll
- libglib-2.0.0.dll
- libgraphite2.dll
- libharfbuzz-0.dll
- libiconv-2.dll
- libintl-8.dll
- libjbig-0.dll
- libjpeg-8.dll
- libLerc.dll
- liblzma-5.dll
- libmad-0.dll
- libogg-0.dll
- libpcre2-8-0.dll
- libpng16-16.dll
- libSDL_image-1-2-0.dll
- libSDL_mixer-1-2-0.dll
- libsharpyuv0.dll
- libstdc++-6.dll
- libtiff-6.dll
- libvorbis-0.dll
- libvorbisfile-3.dll
- libwebp-7.dll
- libwinpthread-1.dll
- libzstd.dll
- SDL_ttf.dll
- SDL.dll
- zlib1.dll

Questa lista è esaustiva e probabilmente molte DLL non sono necessarie per il
funzionamento normale.  Tutte le DLL si trovano in:

C:\msys64\mingw64\bin\

Se distribuite la propria versione, è consigliabile impacchettare tutte queste
DLL insieme al programma onscripter.exe.

Tutte le altre piattaforme
--------------------------
Forniamo solo versioni per macOS e Windows e facciamo prove solo su GNU/Linux,
macOS e Windows; tuttavia, ONScripter stesso è stato compilato con successo
per piattaforme diverse come Android, iOS, Symbian, MacOS Classic, PSP, *BSD e
la lista continua.  Tuttavia, non abbiamo modificato i makefile per queste
piattaforme e non possiamo garantire il successo della compilazione su
piattaforme diverse da GNU/Linux, macOS e Windows.  Se compilate su una di
queste piattaforme, dovete assicurarvi che la definizione -DINSANI sia
presente. Se riuscite a compilare su una delle nostre piattaforme non
supportate, vi preghiamo di mettervi in comunicazione con noi e di contribuire
con i vostri Makefile modificati.

2.1 PERCHÉ DELLE LIBRERIE DINAMICHE

Tradizionalmente, si è cercato di garantire che le compilazioni di ONScripter-
insani e ONScripter-EN fossero compilate con biblioteche statiche, tra l'altro
per facilitare la distribuzione.  Il problema è che la tendenza del programma
a sviluppare bachi nel corso del tempo a causa di piccole incompatibilità con
i sistemi operativi più recenti potrebbe insorgere abbastanza rapidamente, e
che la presenza di queste librerie statiche può talvolta portare a blocchi nel
corso del tempo, quando il sistema operativo sottostante subisce cambiamenti
significativi.

Il nostro sistema di compilazione per macOS dipende da Homebrew e non dovreste
mai cercare di collegare staticamente le biblioteche di Homebrew, in quanto
tendono a dipendere dalla versione del sistema del sistema operativo, come non
lo sono i dylibs.  Inoltre, per quanto riguarda macOS, canonicamente dovreste
distribuire i dylibs richiesti all'interno del app bundle come fa il nostro
makedist.MacOSX.sh.

Per Windows, le DLL MINGW64 sono ampiamente compatibili con qualsiasi versione
moderna di Windows x86-64 e, nel caso in cui dovessero diventare incompatibili,
la sostituzione con le versioni aggiornate sarà facile.

3. RAGGIUNGERCI

Il creatore d'ONScripter è Ogapee:

- https://onscripter.osdn.jp/onscripter.html

Vi preghiamo di non contattare Ogapee per qualsiasi cosa troviate in
ONScripter-insani tuttavia, poiché questa diramazione presenta delle differenze
rispetto alla versione principale di ONScripter.  Rivolgetevi invece a noi,
preferibilmente tramite GitHub:

- http://nscripter.insani.org/
- https://github.com/insani-org/onscripter-insani/

4. LICENZA

ONScripter-insani è diffuso secondo i termini della licenza pubblica GNU (GPL)
v2.  Questa licenza non si estende alle risorse per qualsiasi gioco eseguito in
ONScripter-insani - tali diritti rimangono ai creatori originali.

Una copia della GPLv2 ('COPYING') è presente in questa cartella dei sorgenti.

5. REGISTRO DELLE MODIFICHE

20230308
--------
- Versione ascendente di ONScripter: 20220816
- Aggiunto il parametro legacy_english_mode
- Imposta english_mode e legacy_english_mode su VERO quando viene rilevata una
  riga che inizia con `
- Creato sistema di rottura di riga per legacy_english_mode
- È stato risolto un baco per il quale le righe che iniziano con ` non possono
  essere avanzate in qualsiasi circostanza
- Modifiche minori per permettere l'uso di SDL2 + SDL12-compat
- macOS:
  + Parametro di compilazione APPBUNDLE che, per impostazione predefinita,
  salva i dati .sav e envdata in ~/Documents/ONScripter/<nome del gioco>
  piuttosto che nella stessa cartella, e per rendere possibile il rilevamento
  delle risorse del gioco nell'app bundle stesso
  + Makefile modificato per macOS
  + Creato lo script per la creazione di app bundle per macOS
- Windows:
  + Nuovo makefile per Windows, utilizzato per MSYS2 anziché per VC++
  + Alcune modifiche per permettere una corretta compilazione mediante MSYS2
  + Funzionalità dell'icona della finestra retroportata (dal 2005!)

Tutte le versioni precedenti
----------------------------
- http://nscripter.insani.org/changelog.html
